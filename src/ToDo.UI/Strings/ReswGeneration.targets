<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Target Name="ReswGeneration" BeforeTargets="Build">
    <ReswGenerationTask
      L12nResource="$(MSBuildThisFileDirectory)Resources.l12n.xml"
      Languages="en,fr,es"
      OutputPath="$(MSBuildThisFileDirectory)" />
  </Target>

  <UsingTask
    TaskName="ReswGenerationTask"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <L12nResource ParameterType="System.String" Required="true" />
      <Languages ParameterType="System.String" Required="true" />
      <OutputPath ParameterType="System.String" Required="true" />
    </ParameterGroup>

    <Task>
      <Using Namespace="System"/>
      <Using Namespace="System.Linq"/>
      <Using Namespace="System.IO"/>
      <Using Namespace="System.Xml"/>
      <Using Namespace="System.Xml.Linq"/>

      <Code Type="Fragment" Language="cs">
        <![CDATA[

Log.LogMessage($"Source file: {L12nResource}");
Log.LogMessage($"Languages: {Languages}");

var languageMap = Languages.Split(',').ToDictionary(x => x, x => $"{x},default");
var keys = languageMap.Values.SelectMany(x => x.Split(',')).Distinct();

Log.LogMessage($"Language mappings:");
foreach(var map in languageMap)
{
	Log.LogMessage($"\t{map.Key} -> {map.Value}");
}

var root = XElement.Parse(File.ReadAllText(L12nResource));
var parsedStrings = root.Descendants()
	.Where(x => x.Name == "data")
	.Select(x => new
	{
		FullName = GetFullName(x),
		Localization = keys.ToDictionary(y => y, y =>
			x.Attribute(y)?.Value ??
			x.Element(y)?.Value)
	})
	.ToArray();

var duplicatedEntries = parsedStrings
	.GroupBy(x => x.FullName, (k, g) => new { Key = k, Count = g.Count() })
	.Where(x => x.Count > 1)
	.ToArray();
if (duplicatedEntries.Any())
{
	Log.LogError("Duplicated resource keys found:");
	foreach(var entry in duplicatedEntries)
	{
		Log.LogError($"\t{entry.Key}");
	}
}

foreach (var language in languageMap)
{
	var lookup = language.Value.Split(',').ToArray();
	var result = new XElement("root", parsedStrings
		.Select(x => (object)new XElement("data",
			new XAttribute("name", x.FullName),
			new XAttribute(XNamespace.Xml + "space", "preserve"),
			new XElement("value",
				FindValue(x.Localization, lookup) ??
				//FindValue(x.Localization, new[] { "en" }) ??
				throw new KeyNotFoundException($"Could not find localization resource for '{x.FullName}' in '{language.Key}'"))))
		.Prepend(new XComment(@$"
			This file is automatically generated from '{Path.GetFileName(L12nResource)}'.
			Do not modify this file manually.
		"))
	);

	var path = Path.Combine(OutputPath, language.Key, "Resources.resw");
	Directory.CreateDirectory(Path.GetDirectoryName(path));
	File.WriteAllText(path, result.ToString());
	Log.LogMessage($"{parsedStrings.Length} entries written to {path}");
}

string GetFullName(XElement data)
{
	return string.Concat(GetAncestry(data.Parent)
		.Reverse()
		.Where(x => x.Name == "section")
		.Select(x => x.Attribute("prefix").Value)
		.Concat(new[] { data.Attribute("name").Value })
	);
}
IEnumerable<XElement> GetAncestry(XElement e)
{
	while (e != null)
	{
		yield return e;
		e = e.Parent;
	}
}
string FindValue(Dictionary<string, string> map, string[] keys)
{
	return keys
		.Select(x => map[x])
		.Where(x => x != null)
		.FirstOrDefault();
}

]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
